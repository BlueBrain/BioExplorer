/* Copyright (c) 2018, EPFL/Blue Brain Project
 * All rights reserved. Do not distribute without permission.
 * Responsible Author: Cyrille Favreau <cyrille.favreau@epfl.ch>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// ospray
#include <ospray/SDK/camera/PerspectiveCamera.ih>
#include <ospray/SDK/common/Model.ih>
#include <ospray/SDK/fb/FrameBuffer.ih>
#include <ospray/SDK/lights/Light.ih>
#include <ospray/SDK/render/Renderer.ih>
#include <ospray/SDK/texture/Texture2D.ih>

#include "AdvancedMaterial.ih"

struct SimulationRenderer
{
    Renderer super;

    // Transfer function attributes
    const uniform TransferFunction* uniform transferFunction;

    // Simulation data
    uniform float* uniform simulationData;
    uint64 simulationDataSize;

    // Secondary model
    Model* secondaryModel;
    float maxDistanceToSecondaryModel;

    // Fog
    float fogThickness;
    float fogStart;

    // Shading
    AdvancedMaterial* bgMaterial;
    float exposure;
    bool useHardwareRandomizer;
    bool showBackground;
    float epsilonFactor;
    float timestamp;
    float alphaCorrection;
    uint32 randomNumber;
    uint32 maxBounces;
};

extern "C" unmasked uniform int SimulationRenderer_getBytesPerPrimitive(
    const void* uniform geometry);

static inline int getBytesPerPrimitive(const void* geometry)
{
    int bytesPerPrimitive;
    foreach_unique(g in geometry)
    {
        bytesPerPrimitive = SimulationRenderer_getBytesPerPrimitive(g);
    }
    return bytesPerPrimitive;
}

static inline uint64 getOffset(const uniform Geometry* geometry,
                               const varying int primID)
{
    if (!geometry)
        return 0;

    // The data pointer in all "derived" geometries is just after data members
    // of the base Geometry struct. That's why array index starts at 1
    const uniform uint8* data = *((const uniform uint8**)&geometry[1]);

    const int bytesPerPrimitive = getBytesPerPrimitive(geometry->cppEquivalent);
    const uint64 bytesPerPrimitive64 = (uint64)bytesPerPrimitive;
    if (primID * bytesPerPrimitive64 > 0x7FFFFFFF)
        data =
            (const uniform uint8*)((uint64)data + bytesPerPrimitive64 * primID);
    else
        data += bytesPerPrimitive * primID;

    return *((const uniform uint64*)data);
}

inline vec4f getSimulationValue(const uniform SimulationRenderer* uniform self,
                                varying DifferentialGeometry* dg,
                                const varying int primID)
{
    const uint64 offset = getOffset(dg->geometry, primID);
    if (offset != NO_USER_DATA && offset < self->simulationDataSize)
    {
        const varying float value = self->simulationData[offset];
        const uniform TransferFunction* uniform tf = self->transferFunction;
        return make_vec4f(tf->getColorForValue(tf, value),
                          tf->getOpacityForValue(tf, value));
    }
    return make_vec4f(0.f, 1.f, 0.f, 1.f);
}
