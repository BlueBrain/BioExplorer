<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="db/d21/PerspectiveStereoCamera_8ispc" kind="file" language="C++">
    <compoundname>PerspectiveStereoCamera.ispc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">/*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>Blue<sp/>Brain<sp/>BioExplorer<sp/>is<sp/>a<sp/>tool<sp/>for<sp/>scientists<sp/>to<sp/>extract<sp/>and<sp/>analyse</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>scientific<sp/>data<sp/>from<sp/>visualization</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Copyright<sp/>2020-2021<sp/>Blue<sp/>BrainProject<sp/>/<sp/>EPFL</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software:<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify<sp/>it<sp/>under</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Foundation,<sp/>either<sp/>version<sp/>3<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>version.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,<sp/>but<sp/>WITHOUT</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>details.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>along<sp/>with</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>this<sp/>program.<sp/><sp/>If<sp/>not,<sp/>see<sp/>&lt;https://www.gnu.org/licenses/&gt;.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*/</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;utils.ih&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;math/sampling.ih&quot;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;ospray/SDK/camera/Camera.ih&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">inline<sp/>float<sp/>getRandomValue()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>r;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int<sp/>nbMaxTries<sp/>=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(nbMaxTries<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>rdrand(&amp;r)<sp/>==<sp/>false)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--nbMaxTries;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>r;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">struct<sp/>PerspectiveStereoCamera</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Camera<sp/>super;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>org;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>dir_00;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>dir_du;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>dir_dv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>scaledAperture;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>aspect;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>side_by_side;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>ipd_offset;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clip<sp/>planes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>uniform<sp/>vec4f*<sp/>clipPlanes;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>numClipPlanes;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>PerspectiveStereoCamera_initRay(uniform<sp/>Camera*<sp/>uniform<sp/>_self,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>varying<sp/>Ray&amp;<sp/>ray,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>varying<sp/>CameraSample&amp;<sp/>sample)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uniform<sp/>PerspectiveStereoCamera*<sp/>uniform<sp/>self<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uniform<sp/>PerspectiveStereoCamera<sp/>*<sp/>uniform)<sp/>_self;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec2f<sp/>screen<sp/>=<sp/>sample.screen;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>org<sp/>=<sp/>self-&gt;org;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(self-&gt;side_by_side)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>screen.x<sp/>*=<sp/>2.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(screen.x<sp/>&lt;<sp/>1.f)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>org<sp/>=<sp/>org<sp/>-<sp/>self-&gt;ipd_offset;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>org<sp/>=<sp/>org<sp/>+<sp/>self-&gt;ipd_offset;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>screen.x<sp/>-=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen<sp/>=<sp/>Camera_subRegion(_self,<sp/>screen);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vec3f<sp/>dir<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self-&gt;dir_00<sp/>+<sp/>screen.x<sp/>*<sp/>self-&gt;dir_du<sp/>+<sp/>screen.y<sp/>*<sp/>self-&gt;dir_dv;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(self-&gt;super.doesDOF)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>float<sp/>random<sp/>=<sp/>1.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random<sp/>=<sp/>getRandomValue();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>random<sp/>=<sp/>(random<sp/>==<sp/>0.f<sp/>?<sp/>0.001f<sp/>:<sp/>random);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>vec3f<sp/>llp<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniformSampleDisk(random<sp/>*<sp/>self-&gt;scaledAperture,<sp/>sample.lens);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transform<sp/>local<sp/>lens<sp/>point<sp/>to<sp/>focal<sp/>plane<sp/>(dir_XX<sp/>are<sp/>prescaled<sp/>in</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>this<sp/>case)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>vec3f<sp/>lp<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(llp.x<sp/>*<sp/>self-&gt;dir_du)<sp/>+<sp/>((llp.y<sp/>*<sp/>self-&gt;aspect)<sp/>*<sp/>self-&gt;dir_dv);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>org<sp/>=<sp/>org<sp/>+<sp/>lp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dir<sp/>=<sp/>dir<sp/>-<sp/>lp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>nearClip<sp/>=<sp/>self-&gt;super.nearClip;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>float<sp/>farClip<sp/>=<sp/>inf;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>varying<sp/>vec3f<sp/>direction<sp/>=<sp/>normalize(dir);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>clipRay(self-&gt;clipPlanes,<sp/>self-&gt;numClipPlanes,<sp/>org,<sp/>direction,<sp/>nearClip,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>farClip);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>float<sp/>time<sp/>=<sp/>Camera_shutterTime(_self,<sp/>sample.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>setRay(ray,<sp/>org,<sp/>direction,<sp/>nearClip,<sp/>farClip,<sp/>time);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>void*<sp/>uniform<sp/>PerspectiveStereoCamera_create(void*<sp/>uniform<sp/>cppE)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uniform<sp/>PerspectiveStereoCamera*<sp/>uniform<sp/>self<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uniform<sp/>new<sp/>uniform<sp/>PerspectiveStereoCamera;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;super.cppEquivalent<sp/>=<sp/>cppE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;super.initRay<sp/>=<sp/>PerspectiveStereoCamera_initRay;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;super.doesDOF<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;numClipPlanes<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>self;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">export<sp/>void<sp/>PerspectiveStereoCamera_set(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>uniform<sp/>_self,<sp/>const<sp/>uniform<sp/>vec3f&amp;<sp/>org,<sp/>const<sp/>uniform<sp/>vec3f&amp;<sp/>dir_00,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>uniform<sp/>vec3f&amp;<sp/>dir_du,<sp/>const<sp/>uniform<sp/>vec3f&amp;<sp/>dir_dv,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>uniform<sp/>float<sp/>scaledAperture,<sp/>const<sp/>uniform<sp/>float<sp/>aspect,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>uniform<sp/>vec3f&amp;<sp/>ipd_offset,<sp/>const<sp/>uniform<sp/>bool<sp/>side_by_side,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>uniform<sp/>vec4f<sp/>clipPlanes[],<sp/>const<sp/>uniform<sp/>unsigned<sp/>int<sp/>numClipPlanes)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uniform<sp/>PerspectiveStereoCamera*<sp/>uniform<sp/>self<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uniform<sp/>PerspectiveStereoCamera<sp/>*<sp/>uniform)<sp/>_self;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;org<sp/>=<sp/>org;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;dir_00<sp/>=<sp/>dir_00;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;dir_du<sp/>=<sp/>dir_du;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;dir_dv<sp/>=<sp/>dir_dv;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;scaledAperture<sp/>=<sp/>scaledAperture;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;super.doesDOF<sp/>=<sp/>scaledAperture<sp/>&gt;<sp/>0.f;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;aspect<sp/>=<sp/>aspect;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;side_by_side<sp/>=<sp/>side_by_side;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;ipd_offset<sp/>=<sp/>ipd_offset;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;clipPlanes<sp/>=<sp/>clipPlanes;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>self-&gt;numClipPlanes<sp/>=<sp/>numClipPlanes;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/favreau/git/BioExplorer/bioexplorer/core/module/ispc/camera/PerspectiveStereoCamera.ispc"/>
  </compounddef>
</doxygen>
