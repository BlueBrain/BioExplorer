/*
    Copyright 2020 - 2024 Blue Brain Project / EPFL

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

#pragma once

#include <science/common/Types.h>

#include <platform/core/common/Transformation.h>

namespace bioexplorer
{
namespace common
{
/**
 * @brief The shape class allows the creation of 3D shapes generated by a number
 * of element instances. Shapes can be a sphere, a cube, based on a mesh, etc.
 * Elements are molecules loaded from PDB files.
 */
class Shape
{
public:
    /**
     * @brief Construct a new Shape object
     *
     * @param clippingPlanes Clipping planes to apply to the shape
     */
    Shape(const Vector4ds& clippingPlanes);

    /**
     * @brief Destroy the Shape object
     *
     */
    ~Shape();

    /**
     * @brief Get the Transformation for the specified instance of the element
     *
     * @param occurrence Occurrence of the element
     * @param nbOccurrences Total number of occurrences in the shape
     * @param MolecularSystemAnimationDetails Details on how to animate elements
     * of the shape
     * @param offset Location offset of the element on the shape itself
     * @return Transformation Transformation of the instance
     */
    virtual core::Transformation getTransformation(
        const uint64_t occurrence, const uint64_t nbOccurrences,
        const details::MolecularSystemAnimationDetails& MolecularSystemAnimationDetails,
        const double offset = 0.0) const = 0;

    /**
     * @brief Return true if the specified 3D location is inside of the shape,
     * false if it is outside
     *
     * @param point 3D location in space
     * @return true if the 3D location is inside the shape
     * @return false if the 3D location is outside of the shape
     */
    virtual bool isInside(const core::Vector3d& point) const = 0;

    /**
     * @brief Get the total surface of the shape (in nanometers)
     *
     * @return double Suface of the shape
     */
    double getSurface() const { return _surface; }

    /**
     * @brief Get the bounds of the shape
     *
     * @return Boxf Bounds of the shape
     */
    core::Boxf getBounds() const { return _bounds; }

protected:
    core::Boxf _bounds;
    double _surface;
    Vector4ds _clippingPlanes;
};
typedef std::shared_ptr<Shape> ShapePtr;

} // namespace common
} // namespace bioexplorer
