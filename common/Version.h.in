// generated by CommonLibrary.cmake, do not edit.

/**
 * @file include/brayns/version.h
 * Defines version macros and class for library brayns.
 */

#pragma once

// clang-format off

#include <core/brayns/common/Api.h>

#include <string>

namespace brayns
{
/** The current major version. */
#define PACKAGE_VERSION_MAJOR @PACKAGE_VERSION_MAJOR@

/** The current minor version. */
#define PACKAGE_VERSION_MINOR @PACKAGE_VERSION_MINOR@

/** The current patch level. */
#define PACKAGE_VERSION_PATCH @PACKAGE_VERSION_PATCH@

/** The current SCM revision. */
#define PACKAGE_VERSION_REVISION @PACKAGE_VERSION_REVISION@

/** The current binary interface. */
#define PACKAGE_VERSION_ABI @PACKAGE_VERSION_ABI@

/** The current major.minor.version as a string. */
#define PACKAGE_VERSION_STRING "@PACKAGE_VERSION_MAJOR@.@PACKAGE_VERSION_MINOR@.@PACKAGE_VERSION_PATCH@"

/** The current major.minor.version.revision as a string. */
#define PACKAGE_REV_STRING "@PACKAGE_REV_STRING@"

/** True if the current version is newer than the given one. */
#define PACKAGE_VERSION_GT(MAJOR, MINOR, PATCH) \
    ((PACKAGE_VERSION_MAJOR > MAJOR) ||         \
     (PACKAGE_VERSION_MAJOR == MAJOR &&         \
      (PACKAGE_VERSION_MINOR > MINOR || (PACKAGE_VERSION_MINOR == MINOR && PACKAGE_VERSION_PATCH > PATCH))))

/** True if the current version is equal or newer to the given. */
#define PACKAGE_VERSION_GE(MAJOR, MINOR, PATCH) \
    ((PACKAGE_VERSION_MAJOR > MAJOR) ||         \
     (PACKAGE_VERSION_MAJOR == MAJOR &&         \
      (PACKAGE_VERSION_MINOR > MINOR || (PACKAGE_VERSION_MINOR == MINOR && PACKAGE_VERSION_PATCH >= PATCH))))

/** True if the current version is older than the given one. */
#define PACKAGE_VERSION_LT(MAJOR, MINOR, PATCH) \
    ((PACKAGE_VERSION_MAJOR < MAJOR) ||         \
     (PACKAGE_VERSION_MAJOR == MAJOR &&         \
      (PACKAGE_VERSION_MINOR < MINOR || (PACKAGE_VERSION_MINOR == MINOR && PACKAGE_VERSION_PATCH < PATCH))))

/** True if the current version is older or equal to the given. */
#define PACKAGE_VERSION_LE(MAJOR, MINOR, PATCH) \
    ((PACKAGE_VERSION_MAJOR < MAJOR) ||         \
     (PACKAGE_VERSION_MAJOR == MAJOR &&         \
      (PACKAGE_VERSION_MINOR < MINOR || (PACKAGE_VERSION_MINOR == MINOR && PACKAGE_VERSION_PATCH <= PATCH))))

/** Information about the current brayns version. */
class Version
{
public:
    /** @return the current major version of brayns. */
    static int getMajor();

    /** @return the current minor version of brayns. */
    static int getMinor();

    /** @return the current patch level of brayns. */
    static int getPatch();

    /** @return the current brayns version (MM.mm.pp). */
    static std::string getString();

    /** @return the SCM revision. */
    static unsigned long long getRevision();

    /** @return the current binary interface version of brayns. */
    static int getABI();

    /** @return the current brayns version plus the git SHA hash (MM.mm.pp.rev). */
    static std::string getRevString();

    /**
     * Runtime check for ABI compatibility.
     *
     * Call from code using brayns. Will fail if the executable
     * was compiled against a version incompatible with the runtime version.
     *
     * @return true if the link-time and compile-time DSO are compatible.
     */
    static bool check() { return getMajor() == PACKAGE_VERSION_MAJOR && getMinor() == PACKAGE_VERSION_MINOR; }

    /** @return JSON schema describing this object. */
    static std::string getSchema()
    {
        return R"(
                {
                  "title": "Version",
                  "type": "object",
                  "description": "Version information of the running application",
                  "properties": {
                    "major": { "type": "integer" },
                    "minor": { "type": "integer" },
                    "patch": { "type": "integer" },
                    "abi": { "type": "integer" },
                    "revision": { "type": "string" }
                  }
               }
               )";
    }

    /** @return JSON-encoded data for this object. */
    static std::string toJSON()
    {
        return R"(
               {
                 "major": @PACKAGE_VERSION_MAJOR@,
                 "minor": @PACKAGE_VERSION_MINOR@,
                 "patch": @PACKAGE_VERSION_PATCH@,
                 "abi": @PACKAGE_VERSION_ABI@,
                 "revision": "@PACKAGE_REV_STRING@"
               }
               )";
    }
};

} // namespace brayns

// clang-format-on
